import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** The results of Azure-AsyncOperation. */
export declare interface AzureAsyncOperationResults {
    /**
     * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the resource.  For example, Microsoft.Management/managementGroups
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The current status of the asynchronous operation performed . For example, Running, Succeeded, Failed
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /** The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000 */
    tenantId?: string;
    /** The friendly name of the management group. */
    displayName?: string;
}

/** Optional parameters. */
export declare interface CheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Management group name availability check parameters. */
export declare interface CheckNameAvailabilityRequest {
    /** the name to check for availability */
    name?: string;
    /** fully qualified resource type which includes provider namespace */
    type?: "Microsoft.Management/managementGroups";
}

/** Contains response data for the checkNameAvailability operation. */
export declare type CheckNameAvailabilityResponse = CheckNameAvailabilityResult;

/** Describes the result of the request to check management group name availability. */
export declare interface CheckNameAvailabilityResult {
    /**
     * Required. True indicates name is valid and available. False indicates the name is invalid, unavailable, or both.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nameAvailable?: boolean;
    /**
     * Required if nameAvailable == false. Invalid indicates the name provided does not match the resource provider's naming requirements (incorrect length, unsupported characters, etc.) AlreadyExists indicates that the name is already in use and is therefore unavailable.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reason?: Reason;
    /**
     * Required if nameAvailable == false. Localized. If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that is already in use, and direct them to select a different name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** The child information of a management group used during creation. */
export declare interface CreateManagementGroupChildInfo {
    /**
     * The fully qualified resource type which includes provider namespace (e.g. Microsoft.Management/managementGroups)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: ManagementGroupChildType;
    /**
     * The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the child entity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The friendly name of the child resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The list of children.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly children?: CreateManagementGroupChildInfo[];
}

/** The details of a management group used during creation. */
export declare interface CreateManagementGroupDetails {
    /**
     * The version number of the object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: number;
    /**
     * The date and time when this object was last updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedTime?: Date;
    /**
     * The identity of the principal or process that updated the object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedBy?: string;
    /** (Optional) The ID of the parent management group used during creation. */
    parent?: CreateParentGroupInfo;
}

/** Management group creation parameters. */
export declare interface CreateManagementGroupRequest {
    /**
     * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the resource.  For example, Microsoft.Management/managementGroups
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The name of the management group. For example, 00000000-0000-0000-0000-000000000000 */
    name?: string;
    /**
     * The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The friendly name of the management group. If no value is passed then this  field will be set to the groupId. */
    displayName?: string;
    /** The details of a management group used during creation. */
    details?: CreateManagementGroupDetails;
    /**
     * The list of children.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly children?: CreateManagementGroupChildInfo[];
}

/** Parameters for creating or updating Management Group settings */
export declare interface CreateOrUpdateSettingsRequest {
    /** Indicates whether RBAC access is required upon group creation under the root Management Group. If set to true, user will require Microsoft.Management/managementGroups/write action on the root Management Group scope in order to create new Groups directly under the root. This will prevent new users from creating new Management Groups, unless they are given access. */
    requireAuthorizationForGroupCreation?: boolean;
    /** Settings that sets the default Management Group under which new subscriptions get added in this tenant. For example, /providers/Microsoft.Management/managementGroups/defaultGroup */
    defaultManagementGroup?: string;
}

/** (Optional) The ID of the parent management group used during creation. */
export declare interface CreateParentGroupInfo {
    /** The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000 */
    id?: string;
    /**
     * The name of the parent management group
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The friendly name of the parent management group.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
}

/** The descendant. */
export declare interface DescendantInfo {
    /**
     * The fully qualified ID for the descendant.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000 or /subscriptions/0000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the resource. For example, Microsoft.Management/managementGroups or /subscriptions
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The name of the descendant. For example, 00000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The friendly name of the management group. */
    displayName?: string;
    /** The ID of the parent management group. */
    parent?: DescendantParentGroupInfo;
}

/** Describes the result of the request to view descendants. */
export declare interface DescendantListResult {
    /** The list of descendants. */
    value?: DescendantInfo[];
    /**
     * The URL to use for getting the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The ID of the parent management group. */
export declare interface DescendantParentGroupInfo {
    /** The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000 */
    id?: string;
}

/** Interface representing a Entities. */
export declare interface Entities {
    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param options The options parameters.
     */
    list(options?: EntitiesListOptionalParams): PagedAsyncIterableIterator<EntityInfo>;
}

/** Optional parameters. */
export declare interface EntitiesListNextOptionalParams extends coreClient.OperationOptions {
    /** Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. */
    cacheControl?: string;
    /**
     * Page continuation token is only used if a previous operation returned a partial result.
     * If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     *
     */
    skiptoken?: string;
    /** The filter parameter allows you to filter on the the name or display name fields. You can check for equality on the name field (e.g. name eq '{entityName}')  and you can check for substrings on either the name or display name fields(e.g. contains(name, '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note that the '{entityName}' and '{substringToSearch}' fields are checked case insensitively. */
    filter?: string;
    /** Number of elements to return when retrieving results. Passing this in will override $skipToken. */
    top?: number;
    /** Number of entities to skip over when retrieving results. Passing this in will override $skipToken. */
    skip?: number;
    /** This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When specified the $select parameter can override select in $skipToken. */
    select?: string;
    /**
     * The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in.
     * With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user's permissions.
     * With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity.
     * With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants.
     * With $search=ParentOnly the API will return only the group if the user has access to at least one of the descendants of the group.
     * With $search=ChildrenOnly the API will return only the first level of children of the group entity info specified in $filter.  The user must have direct access to the children entities or one of it's descendants for it to show up in the results.
     */
    search?: Enum2;
    /** The view parameter allows clients to filter the type of data that is returned by the getEntities call. */
    view?: Enum3;
    /** A filter which allows the get entities call to focus on a particular group (i.e. "$filter=name eq 'groupName'") */
    groupName?: string;
}

/** Contains response data for the listNext operation. */
export declare type EntitiesListNextResponse = EntityListResult;

/** Optional parameters. */
export declare interface EntitiesListOptionalParams extends coreClient.OperationOptions {
    /** Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. */
    cacheControl?: string;
    /**
     * Page continuation token is only used if a previous operation returned a partial result.
     * If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     *
     */
    skiptoken?: string;
    /** The filter parameter allows you to filter on the the name or display name fields. You can check for equality on the name field (e.g. name eq '{entityName}')  and you can check for substrings on either the name or display name fields(e.g. contains(name, '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note that the '{entityName}' and '{substringToSearch}' fields are checked case insensitively. */
    filter?: string;
    /** Number of elements to return when retrieving results. Passing this in will override $skipToken. */
    top?: number;
    /** Number of entities to skip over when retrieving results. Passing this in will override $skipToken. */
    skip?: number;
    /** This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When specified the $select parameter can override select in $skipToken. */
    select?: string;
    /**
     * The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in.
     * With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user's permissions.
     * With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity.
     * With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants.
     * With $search=ParentOnly the API will return only the group if the user has access to at least one of the descendants of the group.
     * With $search=ChildrenOnly the API will return only the first level of children of the group entity info specified in $filter.  The user must have direct access to the children entities or one of it's descendants for it to show up in the results.
     */
    search?: Enum2;
    /** The view parameter allows clients to filter the type of data that is returned by the getEntities call. */
    view?: Enum3;
    /** A filter which allows the get entities call to focus on a particular group (i.e. "$filter=name eq 'groupName'") */
    groupName?: string;
}

/** Contains response data for the list operation. */
export declare type EntitiesListResponse = EntityListResult;

/** The management group details for the hierarchy view. */
export declare interface EntityHierarchyItem {
    /**
     * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the resource.  For example, Microsoft.Management/managementGroups
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The friendly name of the management group. */
    displayName?: string;
    /** The users specific permissions to this item. */
    permissions?: Permissions_2;
    /** The list of children. */
    children?: EntityHierarchyItem[];
}

/** The entity. */
export declare interface EntityInfo {
    /**
     * The fully qualified ID for the entity.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the resource. For example, Microsoft.Management/managementGroups
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The name of the entity. For example, 00000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The AAD Tenant ID associated with the entity. For example, 00000000-0000-0000-0000-000000000000 */
    tenantId?: string;
    /** The friendly name of the management group. */
    displayName?: string;
    /** (Optional) The ID of the parent management group. */
    parent?: EntityParentGroupInfo;
    /** The users specific permissions to this item. */
    permissions?: Permissions_2;
    /** The users specific permissions to this item. */
    inheritedPermissions?: Permissions_2;
    /** Number of Descendants */
    numberOfDescendants?: number;
    /** Number of children is the number of Groups and Subscriptions that are exactly one level underneath the current Group. */
    numberOfChildren?: number;
    /** Number of children is the number of Groups that are exactly one level underneath the current Group. */
    numberOfChildGroups?: number;
    /** The parent display name chain from the root group to the immediate parent */
    parentDisplayNameChain?: string[];
    /** The parent name chain from the root group to the immediate parent */
    parentNameChain?: string[];
}

/** Describes the result of the request to view entities. */
export declare interface EntityListResult {
    /** The list of entities. */
    value?: EntityInfo[];
    /**
     * Total count of records that match the filter
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly count?: number;
    /**
     * The URL to use for getting the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** (Optional) The ID of the parent management group. */
export declare interface EntityParentGroupInfo {
    /** The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000 */
    id?: string;
}

/**
 * Defines values for Enum0. \
 * {@link KnownEnum0} can be used interchangeably with Enum0,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **children** \
 * **path** \
 * **ancestors**
 */
export declare type Enum0 = string;

/**
 * Defines values for Enum2. \
 * {@link KnownEnum2} can be used interchangeably with Enum2,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AllowedParents** \
 * **AllowedChildren** \
 * **ParentAndFirstLevelChildren** \
 * **ParentOnly** \
 * **ChildrenOnly**
 */
export declare type Enum2 = string;

/**
 * Defines values for Enum3. \
 * {@link KnownEnum3} can be used interchangeably with Enum3,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **FullHierarchy** \
 * **GroupsOnly** \
 * **SubscriptionsOnly** \
 * **Audit**
 */
export declare type Enum3 = string;

/** The details of the error. */
export declare interface ErrorDetails {
    /** One of a server-defined set of error codes. */
    code?: string;
    /** A human-readable representation of the error. */
    message?: string;
    /** A human-readable representation of the error's details. */
    details?: string;
}

/** The error object. */
export declare interface ErrorResponse {
    /** The details of the error. */
    error?: ErrorDetails;
}

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Settings defined at the Management Group scope. */
export declare interface HierarchySettings {
    /**
     * The fully qualified ID for the settings object.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000/settings/default.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the resource.  For example, Microsoft.Management/managementGroups/settings.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The name of the object. In this case, default.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The AAD Tenant ID associated with the hierarchy settings. For example, 00000000-0000-0000-0000-000000000000 */
    tenantId?: string;
    /** Indicates whether RBAC access is required upon group creation under the root Management Group. If set to true, user will require Microsoft.Management/managementGroups/write action on the root Management Group scope in order to create new Groups directly under the root. This will prevent new users from creating new Management Groups, unless they are given access. */
    requireAuthorizationForGroupCreation?: boolean;
    /** Settings that sets the default Management Group under which new subscriptions get added in this tenant. For example, /providers/Microsoft.Management/managementGroups/defaultGroup */
    defaultManagementGroup?: string;
}

/** Optional parameters. */
export declare interface HierarchySettingsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type HierarchySettingsCreateOrUpdateResponse = HierarchySettings;

/** Optional parameters. */
export declare interface HierarchySettingsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface HierarchySettingsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type HierarchySettingsGetResponse = HierarchySettings;

/** The hierarchy settings resource. */
export declare interface HierarchySettingsInfo {
    /**
     * The fully qualified ID for the settings object.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000/settings/default.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the resource.  For example, Microsoft.Management/managementGroups/settings.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The name of the object. In this case, default.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The AAD Tenant ID associated with the hierarchy settings. For example, 00000000-0000-0000-0000-000000000000 */
    tenantId?: string;
    /** Indicates whether RBAC access is required upon group creation under the root Management Group. If set to true, user will require Microsoft.Management/managementGroups/write action on the root Management Group scope in order to create new Groups directly under the root. This will prevent new users from creating new Management Groups, unless they are given access. */
    requireAuthorizationForGroupCreation?: boolean;
    /** Settings that sets the default Management Group under which new subscriptions get added in this tenant. For example, /providers/Microsoft.Management/managementGroups/defaultGroup */
    defaultManagementGroup?: string;
}

/** Lists all hierarchy settings. */
export declare interface HierarchySettingsList {
    /** The list of hierarchy settings. */
    value?: HierarchySettingsInfo[];
    /**
     * The URL to use for getting the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface HierarchySettingsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type HierarchySettingsListResponse = HierarchySettingsList;

/** Interface representing a HierarchySettingsOperations. */
export declare interface HierarchySettingsOperations {
    /**
     * Gets all the hierarchy settings defined at the Management Group level. Settings can only be set on
     * the root Management Group of the hierarchy.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    list(groupId: string, options?: HierarchySettingsListOptionalParams): Promise<HierarchySettingsListResponse>;
    /**
     * Gets the hierarchy settings defined at the Management Group level. Settings can only be set on the
     * root Management Group of the hierarchy.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    get(groupId: string, options?: HierarchySettingsGetOptionalParams): Promise<HierarchySettingsGetResponse>;
    /**
     * Creates or updates the hierarchy settings defined at the Management Group level.
     *
     * @param groupId Management Group ID.
     * @param createTenantSettingsRequest Tenant level settings request parameter.
     * @param options The options parameters.
     */
    createOrUpdate(groupId: string, createTenantSettingsRequest: CreateOrUpdateSettingsRequest, options?: HierarchySettingsCreateOrUpdateOptionalParams): Promise<HierarchySettingsCreateOrUpdateResponse>;
    /**
     * Updates the hierarchy settings defined at the Management Group level.
     *
     * @param groupId Management Group ID.
     * @param createTenantSettingsRequest Tenant level settings request parameter.
     * @param options The options parameters.
     */
    update(groupId: string, createTenantSettingsRequest: CreateOrUpdateSettingsRequest, options?: HierarchySettingsUpdateOptionalParams): Promise<HierarchySettingsUpdateResponse>;
    /**
     * Deletes the hierarchy settings defined at the Management Group level.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    delete(groupId: string, options?: HierarchySettingsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface HierarchySettingsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type HierarchySettingsUpdateResponse = HierarchySettings;

/** Known values of {@link Enum0} that the service accepts. */
export declare enum KnownEnum0 {
    /** Children */
    Children = "children",
    /** Path */
    Path = "path",
    /** Ancestors */
    Ancestors = "ancestors"
}

/** Known values of {@link Enum2} that the service accepts. */
export declare enum KnownEnum2 {
    /** AllowedParents */
    AllowedParents = "AllowedParents",
    /** AllowedChildren */
    AllowedChildren = "AllowedChildren",
    /** ParentAndFirstLevelChildren */
    ParentAndFirstLevelChildren = "ParentAndFirstLevelChildren",
    /** ParentOnly */
    ParentOnly = "ParentOnly",
    /** ChildrenOnly */
    ChildrenOnly = "ChildrenOnly"
}

/** Known values of {@link Enum3} that the service accepts. */
export declare enum KnownEnum3 {
    /** FullHierarchy */
    FullHierarchy = "FullHierarchy",
    /** GroupsOnly */
    GroupsOnly = "GroupsOnly",
    /** SubscriptionsOnly */
    SubscriptionsOnly = "SubscriptionsOnly",
    /** Audit */
    Audit = "Audit"
}

/** Known values of {@link ManagementGroupChildType} that the service accepts. */
export declare enum KnownManagementGroupChildType {
    /** MicrosoftManagementManagementGroups */
    MicrosoftManagementManagementGroups = "Microsoft.Management/managementGroups",
    /** Subscriptions */
    Subscriptions = "/subscriptions"
}

/** Known values of {@link Permissions} that the service accepts. */
export declare enum KnownPermissions {
    /** Noaccess */
    Noaccess = "noaccess",
    /** View */
    View = "view",
    /** Edit */
    Edit = "edit",
    /** Delete */
    Delete = "delete"
}

/** The details of all subscriptions under management group. */
export declare interface ListSubscriptionUnderManagementGroup {
    /** The list of subscriptions. */
    value?: SubscriptionUnderManagementGroup[];
    /**
     * The URL to use for getting the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The management group details. */
export declare interface ManagementGroup {
    /**
     * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the resource.  For example, Microsoft.Management/managementGroups
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000 */
    tenantId?: string;
    /** The friendly name of the management group. */
    displayName?: string;
    /** The details of a management group. */
    details?: ManagementGroupDetails;
    /** The list of children. */
    children?: ManagementGroupChildInfo[];
}

/** The child information of a management group. */
export declare interface ManagementGroupChildInfo {
    /** The fully qualified resource type which includes provider namespace (e.g. Microsoft.Management/managementGroups) */
    type?: ManagementGroupChildType;
    /** The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000 */
    id?: string;
    /** The name of the child entity. */
    name?: string;
    /** The friendly name of the child resource. */
    displayName?: string;
    /** The list of children. */
    children?: ManagementGroupChildInfo[];
}

/**
 * Defines values for ManagementGroupChildType. \
 * {@link KnownManagementGroupChildType} can be used interchangeably with ManagementGroupChildType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.Management\/managementGroups** \
 * **\/subscriptions**
 */
export declare type ManagementGroupChildType = string;

/** The details of a management group. */
export declare interface ManagementGroupDetails {
    /** The version number of the object. */
    version?: number;
    /** The date and time when this object was last updated. */
    updatedTime?: Date;
    /** The identity of the principal or process that updated the object. */
    updatedBy?: string;
    /** (Optional) The ID of the parent management group. */
    parent?: ParentGroupInfo;
    /** The path from the root to the current group. */
    path?: ManagementGroupPathElement[];
    /** The ancestors of the management group. */
    managementGroupAncestors?: string[];
    /** The ancestors of the management group displayed in reversed order, from immediate parent to the root. */
    managementGroupAncestorsChain?: ManagementGroupPathElement[];
}

/** The management group resource. */
export declare interface ManagementGroupInfo {
    /**
     * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the resource. For example, Microsoft.Management/managementGroups
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000 */
    tenantId?: string;
    /** The friendly name of the management group. */
    displayName?: string;
}

/** Describes the result of the request to list management groups. */
export declare interface ManagementGroupListResult {
    /** The list of management groups. */
    value?: ManagementGroupInfo[];
    /**
     * The URL to use for getting the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** A path element of a management group ancestors. */
export declare interface ManagementGroupPathElement {
    /** The name of the group. */
    name?: string;
    /** The friendly name of the group. */
    displayName?: string;
}

/** Interface representing a ManagementGroups. */
export declare interface ManagementGroups {
    /**
     * List management groups for the authenticated user.
     *
     * @param options The options parameters.
     */
    list(options?: ManagementGroupsListOptionalParams): PagedAsyncIterableIterator<ManagementGroupInfo>;
    /**
     * List all entities that descend from a management group.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    listDescendants(groupId: string, options?: ManagementGroupsGetDescendantsOptionalParams): PagedAsyncIterableIterator<DescendantInfo>;
    /**
     * Get the details of the management group.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    get(groupId: string, options?: ManagementGroupsGetOptionalParams): Promise<ManagementGroupsGetResponse>;
    /**
     * Create or update a management group.
     * If a management group is already created and a subsequent create request is issued with different
     * properties, the management group properties will be updated.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(groupId: string, createManagementGroupRequest: CreateManagementGroupRequest, options?: ManagementGroupsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ManagementGroupsCreateOrUpdateResponse>, ManagementGroupsCreateOrUpdateResponse>>;
    /**
     * Create or update a management group.
     * If a management group is already created and a subsequent create request is issued with different
     * properties, the management group properties will be updated.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(groupId: string, createManagementGroupRequest: CreateManagementGroupRequest, options?: ManagementGroupsCreateOrUpdateOptionalParams): Promise<ManagementGroupsCreateOrUpdateResponse>;
    /**
     * Update a management group.
     *
     * @param groupId Management Group ID.
     * @param patchGroupRequest Management group patch parameters.
     * @param options The options parameters.
     */
    update(groupId: string, patchGroupRequest: PatchManagementGroupRequest, options?: ManagementGroupsUpdateOptionalParams): Promise<ManagementGroupsUpdateResponse>;
    /**
     * Delete management group.
     * If a management group contains child resources, the request will fail.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    beginDelete(groupId: string, options?: ManagementGroupsDeleteOptionalParams): Promise<PollerLike<PollOperationState<ManagementGroupsDeleteResponse>, ManagementGroupsDeleteResponse>>;
    /**
     * Delete management group.
     * If a management group contains child resources, the request will fail.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    beginDeleteAndWait(groupId: string, options?: ManagementGroupsDeleteOptionalParams): Promise<ManagementGroupsDeleteResponse>;
}

export declare class ManagementGroupsAPI extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the ManagementGroupsAPI class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, options?: ManagementGroupsAPIOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Checks if the specified management group name is valid and unique
     * @param checkNameAvailabilityRequest Management group name availability check parameters.
     * @param options The options parameters.
     */
    checkNameAvailability(checkNameAvailabilityRequest: CheckNameAvailabilityRequest, options?: CheckNameAvailabilityOptionalParams): Promise<CheckNameAvailabilityResponse>;
    /**
     * Starts backfilling subscriptions for the Tenant.
     * @param options The options parameters.
     */
    startTenantBackfill(options?: StartTenantBackfillOptionalParams): Promise<StartTenantBackfillResponse>;
    /**
     * Gets tenant backfill status
     * @param options The options parameters.
     */
    tenantBackfillStatus(options?: TenantBackfillStatusOptionalParams): Promise<TenantBackfillStatusResponse>;
    managementGroups: ManagementGroups;
    managementGroupSubscriptions: ManagementGroupSubscriptions;
    hierarchySettingsOperations: HierarchySettingsOperations;
    operations: Operations;
    entities: Entities;
}

/** Optional parameters. */
export declare interface ManagementGroupsAPIOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Defines headers for ManagementGroups_createOrUpdate operation. */
export declare interface ManagementGroupsCreateOrUpdateHeaders {
    /**
     * URL for determining when an operation has completed. Send a GET request to the URL in Location header.
     * The URI should return a 202 until the operation reaches a terminal state and 200 once it reaches a terminal state.
     *
     * For more info: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#202-accepted-and-location-headers
     */
    location?: string;
    /**
     * URL for checking the ongoing status of the operation.
     * To get the status of the asynchronous operation, send a GET request to the URL in Azure-AsyncOperation header value.
     *
     * For more info: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#asynchronous-operations
     */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface ManagementGroupsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. */
    cacheControl?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ManagementGroupsCreateOrUpdateResponse = ManagementGroup;

/** Defines headers for ManagementGroups_delete operation. */
export declare interface ManagementGroupsDeleteHeaders {
    /**
     * URL for determining when an operation has completed. Send a GET request to the URL in Location header.
     * The URI should return a 202 until the operation reaches a terminal state and 200 once it reaches a terminal state.
     *
     * For more info: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#202-accepted-and-location-headers
     */
    location?: string;
    /**
     * URL for checking the ongoing status of the operation.
     * To get the status of the asynchronous operation, send a GET request to the URL in Azure-AsyncOperation header value.
     *
     * For more info: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#asynchronous-operations
     */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface ManagementGroupsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. */
    cacheControl?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type ManagementGroupsDeleteResponse = ManagementGroupsDeleteHeaders & AzureAsyncOperationResults;

/** Optional parameters. */
export declare interface ManagementGroupsGetDescendantsNextOptionalParams extends coreClient.OperationOptions {
    /**
     * Page continuation token is only used if a previous operation returned a partial result.
     * If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     *
     */
    skiptoken?: string;
    /** Number of elements to return when retrieving results. Passing this in will override $skipToken. */
    top?: number;
}

/** Contains response data for the getDescendantsNext operation. */
export declare type ManagementGroupsGetDescendantsNextResponse = DescendantListResult;

/** Optional parameters. */
export declare interface ManagementGroupsGetDescendantsOptionalParams extends coreClient.OperationOptions {
    /**
     * Page continuation token is only used if a previous operation returned a partial result.
     * If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     *
     */
    skiptoken?: string;
    /** Number of elements to return when retrieving results. Passing this in will override $skipToken. */
    top?: number;
}

/** Contains response data for the getDescendants operation. */
export declare type ManagementGroupsGetDescendantsResponse = DescendantListResult;

/** Optional parameters. */
export declare interface ManagementGroupsGetOptionalParams extends coreClient.OperationOptions {
    /** Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. */
    cacheControl?: string;
    /** The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. */
    expand?: Enum0;
    /** The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. */
    recurse?: boolean;
    /** A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription') */
    filter?: string;
}

/** Contains response data for the get operation. */
export declare type ManagementGroupsGetResponse = ManagementGroup;

/** Optional parameters. */
export declare interface ManagementGroupsListNextOptionalParams extends coreClient.OperationOptions {
    /** Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. */
    cacheControl?: string;
    /**
     * Page continuation token is only used if a previous operation returned a partial result.
     * If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     *
     */
    skiptoken?: string;
}

/** Contains response data for the listNext operation. */
export declare type ManagementGroupsListNextResponse = ManagementGroupListResult;

/** Optional parameters. */
export declare interface ManagementGroupsListOptionalParams extends coreClient.OperationOptions {
    /** Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. */
    cacheControl?: string;
    /**
     * Page continuation token is only used if a previous operation returned a partial result.
     * If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     *
     */
    skiptoken?: string;
}

/** Contains response data for the list operation. */
export declare type ManagementGroupsListResponse = ManagementGroupListResult;

/** Interface representing a ManagementGroupSubscriptions. */
export declare interface ManagementGroupSubscriptions {
    /**
     * Retrieves details about all subscriptions which are associated with the management group.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    listSubscriptionsUnderManagementGroup(groupId: string, options?: ManagementGroupSubscriptionsGetSubscriptionsUnderManagementGroupOptionalParams): PagedAsyncIterableIterator<SubscriptionUnderManagementGroup>;
    /**
     * Associates existing subscription with the management group.
     *
     * @param groupId Management Group ID.
     * @param subscriptionId Subscription ID.
     * @param options The options parameters.
     */
    create(groupId: string, subscriptionId: string, options?: ManagementGroupSubscriptionsCreateOptionalParams): Promise<ManagementGroupSubscriptionsCreateResponse>;
    /**
     * De-associates subscription from the management group.
     *
     * @param groupId Management Group ID.
     * @param subscriptionId Subscription ID.
     * @param options The options parameters.
     */
    delete(groupId: string, subscriptionId: string, options?: ManagementGroupSubscriptionsDeleteOptionalParams): Promise<void>;
    /**
     * Retrieves details about given subscription which is associated with the management group.
     *
     * @param groupId Management Group ID.
     * @param subscriptionId Subscription ID.
     * @param options The options parameters.
     */
    getSubscription(groupId: string, subscriptionId: string, options?: ManagementGroupSubscriptionsGetSubscriptionOptionalParams): Promise<ManagementGroupSubscriptionsGetSubscriptionResponse>;
}

/** Optional parameters. */
export declare interface ManagementGroupSubscriptionsCreateOptionalParams extends coreClient.OperationOptions {
    /** Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. */
    cacheControl?: string;
}

/** Contains response data for the create operation. */
export declare type ManagementGroupSubscriptionsCreateResponse = SubscriptionUnderManagementGroup;

/** Optional parameters. */
export declare interface ManagementGroupSubscriptionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. */
    cacheControl?: string;
}

/** Optional parameters. */
export declare interface ManagementGroupSubscriptionsGetSubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. */
    cacheControl?: string;
}

/** Contains response data for the getSubscription operation. */
export declare type ManagementGroupSubscriptionsGetSubscriptionResponse = SubscriptionUnderManagementGroup;

/** Optional parameters. */
export declare interface ManagementGroupSubscriptionsGetSubscriptionsUnderManagementGroupNextOptionalParams extends coreClient.OperationOptions {
    /**
     * Page continuation token is only used if a previous operation returned a partial result.
     * If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     *
     */
    skiptoken?: string;
}

/** Contains response data for the getSubscriptionsUnderManagementGroupNext operation. */
export declare type ManagementGroupSubscriptionsGetSubscriptionsUnderManagementGroupNextResponse = ListSubscriptionUnderManagementGroup;

/** Optional parameters. */
export declare interface ManagementGroupSubscriptionsGetSubscriptionsUnderManagementGroupOptionalParams extends coreClient.OperationOptions {
    /**
     * Page continuation token is only used if a previous operation returned a partial result.
     * If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     *
     */
    skiptoken?: string;
}

/** Contains response data for the getSubscriptionsUnderManagementGroup operation. */
export declare type ManagementGroupSubscriptionsGetSubscriptionsUnderManagementGroupResponse = ListSubscriptionUnderManagementGroup;

/** Optional parameters. */
export declare interface ManagementGroupsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. */
    cacheControl?: string;
}

/** Contains response data for the update operation. */
export declare type ManagementGroupsUpdateResponse = ManagementGroup;

/** Operation supported by the Microsoft.Management resource provider. */
export declare interface Operation {
    /**
     * Operation name: {provider}/{resource}/{operation}.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The object that represents the operation. */
    display?: OperationDisplayProperties;
}

/** The object that represents the operation. */
export declare interface OperationDisplayProperties {
    /**
     * The name of the provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * The resource on which the operation is performed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * The operation that can be performed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * Operation description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** Describes the result of the request to list Microsoft.Management operations. */
export declare interface OperationListResult {
    /**
     * List of operations supported by the Microsoft.Management resource provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The results of an asynchronous operation. */
export declare interface OperationResults {
    /**
     * The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the resource.  For example, Microsoft.Management/managementGroups
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The name of the management group. For example, 00000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000 */
    tenantId?: string;
    /** The friendly name of the management group. */
    displayName?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Management REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** (Optional) The ID of the parent management group. */
export declare interface ParentGroupInfo {
    /** The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000 */
    id?: string;
    /** The name of the parent management group */
    name?: string;
    /** The friendly name of the parent management group. */
    displayName?: string;
}

/** Management group patch parameters. */
export declare interface PatchManagementGroupRequest {
    /** The friendly name of the management group. */
    displayName?: string;
    /** (Optional) The fully qualified ID for the parent management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000 */
    parentGroupId?: string;
}

/**
 * Defines values for Permissions. \
 * {@link KnownPermissions} can be used interchangeably with Permissions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **noaccess** \
 * **view** \
 * **edit** \
 * **delete**
 */
declare type Permissions_2 = string;
export { Permissions_2 as Permissions }

/** Defines values for Reason. */
export declare type Reason = "Invalid" | "AlreadyExists";

/** Optional parameters. */
export declare interface StartTenantBackfillOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the startTenantBackfill operation. */
export declare type StartTenantBackfillResponse = TenantBackfillStatusResult;

/** Defines values for Status. */
export declare type Status = "NotStarted" | "NotStartedButGroupsExist" | "Started" | "Failed" | "Cancelled" | "Completed";

/** The details of subscription under management group. */
export declare interface SubscriptionUnderManagementGroup {
    /**
     * The fully qualified ID for the subscription.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000/subscriptions/0000000-0000-0000-0000-000000000001
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the resource.  For example, Microsoft.Management/managementGroups/subscriptions
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The stringified id of the subscription. For example, 00000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The AAD Tenant ID associated with the subscription. For example, 00000000-0000-0000-0000-000000000000 */
    tenant?: string;
    /** The friendly name of the subscription. */
    displayName?: string;
    /** The ID of the parent management group. */
    parent?: DescendantParentGroupInfo;
    /** The state of the subscription. */
    state?: string;
}

/** Optional parameters. */
export declare interface TenantBackfillStatusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the tenantBackfillStatus operation. */
export declare type TenantBackfillStatusResponse = TenantBackfillStatusResult;

/** The tenant backfill status */
export declare interface TenantBackfillStatusResult {
    /**
     * The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * The status of the Tenant Backfill
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: Status;
}

export { }
