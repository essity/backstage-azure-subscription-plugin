'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link Enum0} that the service accepts. */
exports.KnownEnum0 = void 0;
(function (KnownEnum0) {
    /** Children */
    KnownEnum0["Children"] = "children";
    /** Path */
    KnownEnum0["Path"] = "path";
    /** Ancestors */
    KnownEnum0["Ancestors"] = "ancestors";
})(exports.KnownEnum0 || (exports.KnownEnum0 = {}));
/** Known values of {@link ManagementGroupChildType} that the service accepts. */
exports.KnownManagementGroupChildType = void 0;
(function (KnownManagementGroupChildType) {
    /** MicrosoftManagementManagementGroups */
    KnownManagementGroupChildType["MicrosoftManagementManagementGroups"] = "Microsoft.Management/managementGroups";
    /** Subscriptions */
    KnownManagementGroupChildType["Subscriptions"] = "/subscriptions";
})(exports.KnownManagementGroupChildType || (exports.KnownManagementGroupChildType = {}));
/** Known values of {@link Enum2} that the service accepts. */
exports.KnownEnum2 = void 0;
(function (KnownEnum2) {
    /** AllowedParents */
    KnownEnum2["AllowedParents"] = "AllowedParents";
    /** AllowedChildren */
    KnownEnum2["AllowedChildren"] = "AllowedChildren";
    /** ParentAndFirstLevelChildren */
    KnownEnum2["ParentAndFirstLevelChildren"] = "ParentAndFirstLevelChildren";
    /** ParentOnly */
    KnownEnum2["ParentOnly"] = "ParentOnly";
    /** ChildrenOnly */
    KnownEnum2["ChildrenOnly"] = "ChildrenOnly";
})(exports.KnownEnum2 || (exports.KnownEnum2 = {}));
/** Known values of {@link Enum3} that the service accepts. */
exports.KnownEnum3 = void 0;
(function (KnownEnum3) {
    /** FullHierarchy */
    KnownEnum3["FullHierarchy"] = "FullHierarchy";
    /** GroupsOnly */
    KnownEnum3["GroupsOnly"] = "GroupsOnly";
    /** SubscriptionsOnly */
    KnownEnum3["SubscriptionsOnly"] = "SubscriptionsOnly";
    /** Audit */
    KnownEnum3["Audit"] = "Audit";
})(exports.KnownEnum3 || (exports.KnownEnum3 = {}));
/** Known values of {@link Permissions} that the service accepts. */
exports.KnownPermissions = void 0;
(function (KnownPermissions) {
    /** Noaccess */
    KnownPermissions["Noaccess"] = "noaccess";
    /** View */
    KnownPermissions["View"] = "view";
    /** Edit */
    KnownPermissions["Edit"] = "edit";
    /** Delete */
    KnownPermissions["Delete"] = "delete";
})(exports.KnownPermissions || (exports.KnownPermissions = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const ManagementGroupListResult = {
    type: {
        name: "Composite",
        className: "ManagementGroupListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagementGroupInfo"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagementGroupInfo = {
    type: {
        name: "Composite",
        className: "ManagementGroupInfo",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetails"
                }
            }
        }
    }
};
const ErrorDetails = {
    type: {
        name: "Composite",
        className: "ErrorDetails",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagementGroup = {
    type: {
        name: "Composite",
        className: "ManagementGroup",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "properties.details",
                type: {
                    name: "Composite",
                    className: "ManagementGroupDetails"
                }
            },
            children: {
                serializedName: "properties.children",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagementGroupChildInfo"
                        }
                    }
                }
            }
        }
    }
};
const ManagementGroupDetails = {
    type: {
        name: "Composite",
        className: "ManagementGroupDetails",
        modelProperties: {
            version: {
                serializedName: "version",
                type: {
                    name: "Number"
                }
            },
            updatedTime: {
                serializedName: "updatedTime",
                type: {
                    name: "DateTime"
                }
            },
            updatedBy: {
                serializedName: "updatedBy",
                type: {
                    name: "String"
                }
            },
            parent: {
                serializedName: "parent",
                type: {
                    name: "Composite",
                    className: "ParentGroupInfo"
                }
            },
            path: {
                serializedName: "path",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagementGroupPathElement"
                        }
                    }
                }
            },
            managementGroupAncestors: {
                serializedName: "managementGroupAncestors",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            managementGroupAncestorsChain: {
                serializedName: "managementGroupAncestorsChain",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagementGroupPathElement"
                        }
                    }
                }
            }
        }
    }
};
const ParentGroupInfo = {
    type: {
        name: "Composite",
        className: "ParentGroupInfo",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagementGroupPathElement = {
    type: {
        name: "Composite",
        className: "ManagementGroupPathElement",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagementGroupChildInfo = {
    type: {
        name: "Composite",
        className: "ManagementGroupChildInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            children: {
                serializedName: "children",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagementGroupChildInfo"
                        }
                    }
                }
            }
        }
    }
};
const CreateManagementGroupRequest = {
    type: {
        name: "Composite",
        className: "CreateManagementGroupRequest",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "properties.tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "properties.details",
                type: {
                    name: "Composite",
                    className: "CreateManagementGroupDetails"
                }
            },
            children: {
                serializedName: "properties.children",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CreateManagementGroupChildInfo"
                        }
                    }
                }
            }
        }
    }
};
const CreateManagementGroupDetails = {
    type: {
        name: "Composite",
        className: "CreateManagementGroupDetails",
        modelProperties: {
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            updatedTime: {
                serializedName: "updatedTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            updatedBy: {
                serializedName: "updatedBy",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            parent: {
                serializedName: "parent",
                type: {
                    name: "Composite",
                    className: "CreateParentGroupInfo"
                }
            }
        }
    }
};
const CreateParentGroupInfo = {
    type: {
        name: "Composite",
        className: "CreateParentGroupInfo",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CreateManagementGroupChildInfo = {
    type: {
        name: "Composite",
        className: "CreateManagementGroupChildInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            children: {
                serializedName: "children",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CreateManagementGroupChildInfo"
                        }
                    }
                }
            }
        }
    }
};
const AzureAsyncOperationResults = {
    type: {
        name: "Composite",
        className: "AzureAsyncOperationResults",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PatchManagementGroupRequest = {
    type: {
        name: "Composite",
        className: "PatchManagementGroupRequest",
        modelProperties: {
            displayName: {
                serializedName: "displayName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parentGroupId: {
                serializedName: "parentGroupId",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DescendantListResult = {
    type: {
        name: "Composite",
        className: "DescendantListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DescendantInfo"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DescendantInfo = {
    type: {
        name: "Composite",
        className: "DescendantInfo",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parent: {
                serializedName: "properties.parent",
                type: {
                    name: "Composite",
                    className: "DescendantParentGroupInfo"
                }
            }
        }
    }
};
const DescendantParentGroupInfo = {
    type: {
        name: "Composite",
        className: "DescendantParentGroupInfo",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SubscriptionUnderManagementGroup = {
    type: {
        name: "Composite",
        className: "SubscriptionUnderManagementGroup",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenant: {
                serializedName: "properties.tenant",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            },
            parent: {
                serializedName: "properties.parent",
                type: {
                    name: "Composite",
                    className: "DescendantParentGroupInfo"
                }
            },
            state: {
                serializedName: "properties.state",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ListSubscriptionUnderManagementGroup = {
    type: {
        name: "Composite",
        className: "ListSubscriptionUnderManagementGroup",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubscriptionUnderManagementGroup"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HierarchySettingsList = {
    type: {
        name: "Composite",
        className: "HierarchySettingsList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HierarchySettingsInfo"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HierarchySettingsInfo = {
    type: {
        name: "Composite",
        className: "HierarchySettingsInfo",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            },
            requireAuthorizationForGroupCreation: {
                serializedName: "properties.requireAuthorizationForGroupCreation",
                type: {
                    name: "Boolean"
                }
            },
            defaultManagementGroup: {
                serializedName: "properties.defaultManagementGroup",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HierarchySettings = {
    type: {
        name: "Composite",
        className: "HierarchySettings",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            },
            requireAuthorizationForGroupCreation: {
                serializedName: "properties.requireAuthorizationForGroupCreation",
                type: {
                    name: "Boolean"
                }
            },
            defaultManagementGroup: {
                serializedName: "properties.defaultManagementGroup",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CreateOrUpdateSettingsRequest = {
    type: {
        name: "Composite",
        className: "CreateOrUpdateSettingsRequest",
        modelProperties: {
            requireAuthorizationForGroupCreation: {
                serializedName: "properties.requireAuthorizationForGroupCreation",
                type: {
                    name: "Boolean"
                }
            },
            defaultManagementGroup: {
                serializedName: "properties.defaultManagementGroup",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplayProperties"
                }
            }
        }
    }
};
const OperationDisplayProperties = {
    type: {
        name: "Composite",
        className: "OperationDisplayProperties",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityRequest = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "Microsoft.Management/managementGroups",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityResult = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityResult",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Invalid", "AlreadyExists"]
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EntityListResult = {
    type: {
        name: "Composite",
        className: "EntityListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityInfo"
                        }
                    }
                }
            },
            count: {
                serializedName: "count",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EntityInfo = {
    type: {
        name: "Composite",
        className: "EntityInfo",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "properties.tenantId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parent: {
                serializedName: "properties.parent",
                type: {
                    name: "Composite",
                    className: "EntityParentGroupInfo"
                }
            },
            permissions: {
                serializedName: "properties.permissions",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            inheritedPermissions: {
                serializedName: "properties.inheritedPermissions",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            numberOfDescendants: {
                serializedName: "properties.numberOfDescendants",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            numberOfChildren: {
                serializedName: "properties.numberOfChildren",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            numberOfChildGroups: {
                serializedName: "properties.numberOfChildGroups",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            parentDisplayNameChain: {
                serializedName: "properties.parentDisplayNameChain",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            parentNameChain: {
                serializedName: "properties.parentNameChain",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const EntityParentGroupInfo = {
    type: {
        name: "Composite",
        className: "EntityParentGroupInfo",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TenantBackfillStatusResult = {
    type: {
        name: "Composite",
        className: "TenantBackfillStatusResult",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "NotStarted",
                        "NotStartedButGroupsExist",
                        "Started",
                        "Failed",
                        "Cancelled",
                        "Completed"
                    ]
                }
            }
        }
    }
};
const OperationResults = {
    type: {
        name: "Composite",
        className: "OperationResults",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EntityHierarchyItem = {
    type: {
        name: "Composite",
        className: "EntityHierarchyItem",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            },
            permissions: {
                serializedName: "properties.permissions",
                type: {
                    name: "String"
                }
            },
            children: {
                serializedName: "properties.children",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityHierarchyItem"
                        }
                    }
                }
            }
        }
    }
};
const ManagementGroupsCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "ManagementGroupsCreateOrUpdateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagementGroupsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "ManagementGroupsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ManagementGroupListResult: ManagementGroupListResult,
    ManagementGroupInfo: ManagementGroupInfo,
    ErrorResponse: ErrorResponse,
    ErrorDetails: ErrorDetails,
    ManagementGroup: ManagementGroup,
    ManagementGroupDetails: ManagementGroupDetails,
    ParentGroupInfo: ParentGroupInfo,
    ManagementGroupPathElement: ManagementGroupPathElement,
    ManagementGroupChildInfo: ManagementGroupChildInfo,
    CreateManagementGroupRequest: CreateManagementGroupRequest,
    CreateManagementGroupDetails: CreateManagementGroupDetails,
    CreateParentGroupInfo: CreateParentGroupInfo,
    CreateManagementGroupChildInfo: CreateManagementGroupChildInfo,
    AzureAsyncOperationResults: AzureAsyncOperationResults,
    PatchManagementGroupRequest: PatchManagementGroupRequest,
    DescendantListResult: DescendantListResult,
    DescendantInfo: DescendantInfo,
    DescendantParentGroupInfo: DescendantParentGroupInfo,
    SubscriptionUnderManagementGroup: SubscriptionUnderManagementGroup,
    ListSubscriptionUnderManagementGroup: ListSubscriptionUnderManagementGroup,
    HierarchySettingsList: HierarchySettingsList,
    HierarchySettingsInfo: HierarchySettingsInfo,
    HierarchySettings: HierarchySettings,
    CreateOrUpdateSettingsRequest: CreateOrUpdateSettingsRequest,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplayProperties: OperationDisplayProperties,
    CheckNameAvailabilityRequest: CheckNameAvailabilityRequest,
    CheckNameAvailabilityResult: CheckNameAvailabilityResult,
    EntityListResult: EntityListResult,
    EntityInfo: EntityInfo,
    EntityParentGroupInfo: EntityParentGroupInfo,
    TenantBackfillStatusResult: TenantBackfillStatusResult,
    OperationResults: OperationResults,
    EntityHierarchyItem: EntityHierarchyItem,
    ManagementGroupsCreateOrUpdateHeaders: ManagementGroupsCreateOrUpdateHeaders,
    ManagementGroupsDeleteHeaders: ManagementGroupsDeleteHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const cacheControl = {
    parameterPath: ["options", "cacheControl"],
    mapper: {
        defaultValue: "no-cache",
        serializedName: "Cache-Control",
        type: {
            name: "String"
        }
    }
};
const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
const groupId = {
    parameterPath: "groupId",
    mapper: {
        serializedName: "groupId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
const recurse = {
    parameterPath: ["options", "recurse"],
    mapper: {
        serializedName: "$recurse",
        type: {
            name: "Boolean"
        }
    }
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const createManagementGroupRequest = {
    parameterPath: "createManagementGroupRequest",
    mapper: CreateManagementGroupRequest
};
const patchGroupRequest = {
    parameterPath: "patchGroupRequest",
    mapper: PatchManagementGroupRequest
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const createTenantSettingsRequest = {
    parameterPath: "createTenantSettingsRequest",
    mapper: CreateOrUpdateSettingsRequest
};
const checkNameAvailabilityRequest = {
    parameterPath: "checkNameAvailabilityRequest",
    mapper: CheckNameAvailabilityRequest
};
const skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        serializedName: "$skip",
        type: {
            name: "Number"
        }
    }
};
const select = {
    parameterPath: ["options", "select"],
    mapper: {
        serializedName: "$select",
        type: {
            name: "String"
        }
    }
};
const search = {
    parameterPath: ["options", "search"],
    mapper: {
        serializedName: "$search",
        type: {
            name: "String"
        }
    }
};
const view = {
    parameterPath: ["options", "view"],
    mapper: {
        serializedName: "$view",
        type: {
            name: "String"
        }
    }
};
const groupName = {
    parameterPath: ["options", "groupName"],
    mapper: {
        serializedName: "groupName",
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ManagementGroups operations. */
class ManagementGroupsImpl {
    /**
     * Initialize a new instance of the class ManagementGroups class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List management groups for the authenticated user.
     *
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all entities that descend from a management group.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    listDescendants(groupId, options) {
        const iter = this.getDescendantsPagingAll(groupId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getDescendantsPagingPage(groupId, options, settings);
            }
        };
    }
    getDescendantsPagingPage(groupId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* getDescendantsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._getDescendants(groupId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._getDescendantsNext(groupId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    getDescendantsPagingAll(groupId, options) {
        return tslib.__asyncGenerator(this, arguments, function* getDescendantsPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.getDescendantsPagingPage(groupId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List management groups for the authenticated user.
     *
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$3);
    }
    /**
     * Get the details of the management group.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    get(groupId, options) {
        return this.client.sendOperationRequest({ groupId, options }, getOperationSpec$1);
    }
    /**
     * Create or update a management group.
     * If a management group is already created and a subsequent create request is issued with different
     * properties, the management group properties will be updated.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(groupId, createManagementGroupRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { groupId, createManagementGroupRequest, options }, createOrUpdateOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a management group.
     * If a management group is already created and a subsequent create request is issued with different
     * properties, the management group properties will be updated.
     *
     * @param groupId Management Group ID.
     * @param createManagementGroupRequest Management group creation parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(groupId, createManagementGroupRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(groupId, createManagementGroupRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update a management group.
     *
     * @param groupId Management Group ID.
     * @param patchGroupRequest Management group patch parameters.
     * @param options The options parameters.
     */
    update(groupId, patchGroupRequest, options) {
        return this.client.sendOperationRequest({ groupId, patchGroupRequest, options }, updateOperationSpec$1);
    }
    /**
     * Delete management group.
     * If a management group contains child resources, the request will fail.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    beginDelete(groupId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { groupId, options }, deleteOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete management group.
     * If a management group contains child resources, the request will fail.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    beginDeleteAndWait(groupId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(groupId, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List all entities that descend from a management group.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    _getDescendants(groupId, options) {
        return this.client.sendOperationRequest({ groupId, options }, getDescendantsOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$2);
    }
    /**
     * GetDescendantsNext
     * @param groupId Management Group ID.
     * @param nextLink The nextLink from the previous successful call to the GetDescendants method.
     * @param options The options parameters.
     */
    _getDescendantsNext(groupId, nextLink, options) {
        return this.client.sendOperationRequest({ groupId, nextLink, options }, getDescendantsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/providers/Microsoft.Management/managementGroups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ManagementGroupListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skiptoken],
    urlParameters: [$host],
    headerParameters: [accept, cacheControl],
    serializer: serializer$5
};
const getOperationSpec$1 = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ManagementGroup
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        expand,
        recurse,
        filter
    ],
    urlParameters: [$host, groupId],
    headerParameters: [accept, cacheControl],
    serializer: serializer$5
};
const createOrUpdateOperationSpec$1 = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ManagementGroup
        },
        201: {
            bodyMapper: ManagementGroup
        },
        202: {
            bodyMapper: ManagementGroup
        },
        204: {
            bodyMapper: ManagementGroup
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: createManagementGroupRequest,
    queryParameters: [apiVersion],
    urlParameters: [$host, groupId],
    headerParameters: [
        accept,
        cacheControl,
        contentType
    ],
    mediaType: "json",
    serializer: serializer$5
};
const updateOperationSpec$1 = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ManagementGroup
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: patchGroupRequest,
    queryParameters: [apiVersion],
    urlParameters: [$host, groupId],
    headerParameters: [
        accept,
        cacheControl,
        contentType
    ],
    mediaType: "json",
    serializer: serializer$5
};
const deleteOperationSpec$2 = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: AzureAsyncOperationResults,
            headersMapper: ManagementGroupsDeleteHeaders
        },
        201: {
            bodyMapper: AzureAsyncOperationResults,
            headersMapper: ManagementGroupsDeleteHeaders
        },
        202: {
            bodyMapper: AzureAsyncOperationResults,
            headersMapper: ManagementGroupsDeleteHeaders
        },
        204: {
            bodyMapper: AzureAsyncOperationResults,
            headersMapper: ManagementGroupsDeleteHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, groupId],
    headerParameters: [accept, cacheControl],
    serializer: serializer$5
};
const getDescendantsOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/descendants",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DescendantListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        skiptoken,
        top
    ],
    urlParameters: [$host, groupId],
    headerParameters: [accept],
    serializer: serializer$5
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ManagementGroupListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skiptoken],
    urlParameters: [$host, nextLink],
    headerParameters: [accept, cacheControl],
    serializer: serializer$5
};
const getDescendantsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DescendantListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        skiptoken,
        top
    ],
    urlParameters: [$host, groupId, nextLink],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ManagementGroupSubscriptions operations. */
class ManagementGroupSubscriptionsImpl {
    /**
     * Initialize a new instance of the class ManagementGroupSubscriptions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieves details about all subscriptions which are associated with the management group.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    listSubscriptionsUnderManagementGroup(groupId, options) {
        const iter = this.getSubscriptionsUnderManagementGroupPagingAll(groupId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getSubscriptionsUnderManagementGroupPagingPage(groupId, options, settings);
            }
        };
    }
    getSubscriptionsUnderManagementGroupPagingPage(groupId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* getSubscriptionsUnderManagementGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._getSubscriptionsUnderManagementGroup(groupId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._getSubscriptionsUnderManagementGroupNext(groupId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    getSubscriptionsUnderManagementGroupPagingAll(groupId, options) {
        return tslib.__asyncGenerator(this, arguments, function* getSubscriptionsUnderManagementGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.getSubscriptionsUnderManagementGroupPagingPage(groupId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Associates existing subscription with the management group.
     *
     * @param groupId Management Group ID.
     * @param subscriptionId Subscription ID.
     * @param options The options parameters.
     */
    create(groupId, subscriptionId, options) {
        return this.client.sendOperationRequest({ groupId, subscriptionId, options }, createOperationSpec);
    }
    /**
     * De-associates subscription from the management group.
     *
     * @param groupId Management Group ID.
     * @param subscriptionId Subscription ID.
     * @param options The options parameters.
     */
    delete(groupId, subscriptionId, options) {
        return this.client.sendOperationRequest({ groupId, subscriptionId, options }, deleteOperationSpec$1);
    }
    /**
     * Retrieves details about given subscription which is associated with the management group.
     *
     * @param groupId Management Group ID.
     * @param subscriptionId Subscription ID.
     * @param options The options parameters.
     */
    getSubscription(groupId, subscriptionId, options) {
        return this.client.sendOperationRequest({ groupId, subscriptionId, options }, getSubscriptionOperationSpec);
    }
    /**
     * Retrieves details about all subscriptions which are associated with the management group.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    _getSubscriptionsUnderManagementGroup(groupId, options) {
        return this.client.sendOperationRequest({ groupId, options }, getSubscriptionsUnderManagementGroupOperationSpec);
    }
    /**
     * GetSubscriptionsUnderManagementGroupNext
     * @param groupId Management Group ID.
     * @param nextLink The nextLink from the previous successful call to the
     *                 GetSubscriptionsUnderManagementGroup method.
     * @param options The options parameters.
     */
    _getSubscriptionsUnderManagementGroupNext(groupId, nextLink, options) {
        return this.client.sendOperationRequest({ groupId, nextLink, options }, getSubscriptionsUnderManagementGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SubscriptionUnderManagementGroup
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        groupId,
        subscriptionId
    ],
    headerParameters: [accept, cacheControl],
    serializer: serializer$4
};
const deleteOperationSpec$1 = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        groupId,
        subscriptionId
    ],
    headerParameters: [accept, cacheControl],
    serializer: serializer$4
};
const getSubscriptionOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SubscriptionUnderManagementGroup
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        groupId,
        subscriptionId
    ],
    headerParameters: [accept, cacheControl],
    serializer: serializer$4
};
const getSubscriptionsUnderManagementGroupOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/subscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ListSubscriptionUnderManagementGroup
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skiptoken],
    urlParameters: [$host, groupId],
    headerParameters: [accept],
    serializer: serializer$4
};
const getSubscriptionsUnderManagementGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ListSubscriptionUnderManagementGroup
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skiptoken],
    urlParameters: [$host, groupId, nextLink],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing HierarchySettingsOperations operations. */
class HierarchySettingsOperationsImpl {
    /**
     * Initialize a new instance of the class HierarchySettingsOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the hierarchy settings defined at the Management Group level. Settings can only be set on
     * the root Management Group of the hierarchy.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    list(groupId, options) {
        return this.client.sendOperationRequest({ groupId, options }, listOperationSpec$2);
    }
    /**
     * Gets the hierarchy settings defined at the Management Group level. Settings can only be set on the
     * root Management Group of the hierarchy.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    get(groupId, options) {
        return this.client.sendOperationRequest({ groupId, options }, getOperationSpec);
    }
    /**
     * Creates or updates the hierarchy settings defined at the Management Group level.
     *
     * @param groupId Management Group ID.
     * @param createTenantSettingsRequest Tenant level settings request parameter.
     * @param options The options parameters.
     */
    createOrUpdate(groupId, createTenantSettingsRequest, options) {
        return this.client.sendOperationRequest({ groupId, createTenantSettingsRequest, options }, createOrUpdateOperationSpec);
    }
    /**
     * Updates the hierarchy settings defined at the Management Group level.
     *
     * @param groupId Management Group ID.
     * @param createTenantSettingsRequest Tenant level settings request parameter.
     * @param options The options parameters.
     */
    update(groupId, createTenantSettingsRequest, options) {
        return this.client.sendOperationRequest({ groupId, createTenantSettingsRequest, options }, updateOperationSpec);
    }
    /**
     * Deletes the hierarchy settings defined at the Management Group level.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    delete(groupId, options) {
        return this.client.sendOperationRequest({ groupId, options }, deleteOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: HierarchySettingsList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, groupId],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: HierarchySettings
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, groupId],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: HierarchySettings
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: createTenantSettingsRequest,
    queryParameters: [apiVersion],
    urlParameters: [$host, groupId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const updateOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: HierarchySettings
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: createTenantSettingsRequest,
    queryParameters: [apiVersion],
    urlParameters: [$host, groupId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
    httpMethod: "DELETE",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, groupId],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available Management REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available Management REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/providers/Microsoft.Management/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Entities operations. */
class EntitiesImpl {
    /**
     * Initialize a new instance of the class Entities class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
     *
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.Management/getEntities",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: EntityListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        skiptoken,
        filter,
        top,
        skip,
        select,
        search,
        view,
        groupName
    ],
    urlParameters: [$host],
    headerParameters: [accept, cacheControl],
    serializer: serializer$1
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EntityListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        skiptoken,
        filter,
        top,
        skip,
        select,
        search,
        view,
        groupName
    ],
    urlParameters: [$host, nextLink],
    headerParameters: [accept, cacheControl],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class ManagementGroupsAPI extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the ManagementGroupsAPI class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-managementgroups/2.0.2`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2021-04-01";
        this.managementGroups = new ManagementGroupsImpl(this);
        this.managementGroupSubscriptions = new ManagementGroupSubscriptionsImpl(this);
        this.hierarchySettingsOperations = new HierarchySettingsOperationsImpl(this);
        this.operations = new OperationsImpl(this);
        this.entities = new EntitiesImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Checks if the specified management group name is valid and unique
     * @param checkNameAvailabilityRequest Management group name availability check parameters.
     * @param options The options parameters.
     */
    checkNameAvailability(checkNameAvailabilityRequest, options) {
        return this.sendOperationRequest({ checkNameAvailabilityRequest, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Starts backfilling subscriptions for the Tenant.
     * @param options The options parameters.
     */
    startTenantBackfill(options) {
        return this.sendOperationRequest({ options }, startTenantBackfillOperationSpec);
    }
    /**
     * Gets tenant backfill status
     * @param options The options parameters.
     */
    tenantBackfillStatus(options) {
        return this.sendOperationRequest({ options }, tenantBackfillStatusOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec = {
    path: "/providers/Microsoft.Management/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameAvailabilityResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: checkNameAvailabilityRequest,
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const startTenantBackfillOperationSpec = {
    path: "/providers/Microsoft.Management/startTenantBackfill",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TenantBackfillStatusResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const tenantBackfillStatusOperationSpec = {
    path: "/providers/Microsoft.Management/tenantBackfillStatus",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TenantBackfillStatusResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};

exports.ManagementGroupsAPI = ManagementGroupsAPI;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
