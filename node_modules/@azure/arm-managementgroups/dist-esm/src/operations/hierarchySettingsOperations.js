/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing HierarchySettingsOperations operations. */
export class HierarchySettingsOperationsImpl {
    /**
     * Initialize a new instance of the class HierarchySettingsOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the hierarchy settings defined at the Management Group level. Settings can only be set on
     * the root Management Group of the hierarchy.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    list(groupId, options) {
        return this.client.sendOperationRequest({ groupId, options }, listOperationSpec);
    }
    /**
     * Gets the hierarchy settings defined at the Management Group level. Settings can only be set on the
     * root Management Group of the hierarchy.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    get(groupId, options) {
        return this.client.sendOperationRequest({ groupId, options }, getOperationSpec);
    }
    /**
     * Creates or updates the hierarchy settings defined at the Management Group level.
     *
     * @param groupId Management Group ID.
     * @param createTenantSettingsRequest Tenant level settings request parameter.
     * @param options The options parameters.
     */
    createOrUpdate(groupId, createTenantSettingsRequest, options) {
        return this.client.sendOperationRequest({ groupId, createTenantSettingsRequest, options }, createOrUpdateOperationSpec);
    }
    /**
     * Updates the hierarchy settings defined at the Management Group level.
     *
     * @param groupId Management Group ID.
     * @param createTenantSettingsRequest Tenant level settings request parameter.
     * @param options The options parameters.
     */
    update(groupId, createTenantSettingsRequest, options) {
        return this.client.sendOperationRequest({ groupId, createTenantSettingsRequest, options }, updateOperationSpec);
    }
    /**
     * Deletes the hierarchy settings defined at the Management Group level.
     *
     * @param groupId Management Group ID.
     * @param options The options parameters.
     */
    delete(groupId, options) {
        return this.client.sendOperationRequest({ groupId, options }, deleteOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.HierarchySettingsList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.groupId],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.HierarchySettings
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.groupId],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.HierarchySettings
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.createTenantSettingsRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.groupId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.HierarchySettings
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.createTenantSettingsRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.groupId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
    httpMethod: "DELETE",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.groupId],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=hierarchySettingsOperations.js.map