import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { ManagementGroups, ManagementGroupSubscriptions, HierarchySettingsOperations, Operations, Entities } from "./operationsInterfaces";
import { ManagementGroupsAPIOptionalParams, CheckNameAvailabilityRequest, CheckNameAvailabilityOptionalParams, CheckNameAvailabilityResponse, StartTenantBackfillOptionalParams, StartTenantBackfillResponse, TenantBackfillStatusOptionalParams, TenantBackfillStatusResponse } from "./models";
export declare class ManagementGroupsAPI extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the ManagementGroupsAPI class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, options?: ManagementGroupsAPIOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Checks if the specified management group name is valid and unique
     * @param checkNameAvailabilityRequest Management group name availability check parameters.
     * @param options The options parameters.
     */
    checkNameAvailability(checkNameAvailabilityRequest: CheckNameAvailabilityRequest, options?: CheckNameAvailabilityOptionalParams): Promise<CheckNameAvailabilityResponse>;
    /**
     * Starts backfilling subscriptions for the Tenant.
     * @param options The options parameters.
     */
    startTenantBackfill(options?: StartTenantBackfillOptionalParams): Promise<StartTenantBackfillResponse>;
    /**
     * Gets tenant backfill status
     * @param options The options parameters.
     */
    tenantBackfillStatus(options?: TenantBackfillStatusOptionalParams): Promise<TenantBackfillStatusResponse>;
    managementGroups: ManagementGroups;
    managementGroupSubscriptions: ManagementGroupSubscriptions;
    hierarchySettingsOperations: HierarchySettingsOperations;
    operations: Operations;
    entities: Entities;
}
//# sourceMappingURL=managementGroupsAPI.d.ts.map