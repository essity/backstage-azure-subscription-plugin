/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { CreateManagementGroupRequest as CreateManagementGroupRequestMapper, PatchManagementGroupRequest as PatchManagementGroupRequestMapper, CreateOrUpdateSettingsRequest as CreateOrUpdateSettingsRequestMapper, CheckNameAvailabilityRequest as CheckNameAvailabilityRequestMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const cacheControl = {
    parameterPath: ["options", "cacheControl"],
    mapper: {
        defaultValue: "no-cache",
        serializedName: "Cache-Control",
        type: {
            name: "String"
        }
    }
};
export const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
export const groupId = {
    parameterPath: "groupId",
    mapper: {
        serializedName: "groupId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
export const recurse = {
    parameterPath: ["options", "recurse"],
    mapper: {
        serializedName: "$recurse",
        type: {
            name: "Boolean"
        }
    }
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const createManagementGroupRequest = {
    parameterPath: "createManagementGroupRequest",
    mapper: CreateManagementGroupRequestMapper
};
export const patchGroupRequest = {
    parameterPath: "patchGroupRequest",
    mapper: PatchManagementGroupRequestMapper
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const createTenantSettingsRequest = {
    parameterPath: "createTenantSettingsRequest",
    mapper: CreateOrUpdateSettingsRequestMapper
};
export const checkNameAvailabilityRequest = {
    parameterPath: "checkNameAvailabilityRequest",
    mapper: CheckNameAvailabilityRequestMapper
};
export const skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        serializedName: "$skip",
        type: {
            name: "Number"
        }
    }
};
export const select = {
    parameterPath: ["options", "select"],
    mapper: {
        serializedName: "$select",
        type: {
            name: "String"
        }
    }
};
export const search = {
    parameterPath: ["options", "search"],
    mapper: {
        serializedName: "$search",
        type: {
            name: "String"
        }
    }
};
export const view = {
    parameterPath: ["options", "view"],
    mapper: {
        serializedName: "$view",
        type: {
            name: "String"
        }
    }
};
export const groupName = {
    parameterPath: ["options", "groupName"],
    mapper: {
        serializedName: "groupName",
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map